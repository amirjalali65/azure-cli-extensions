# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .alert_rule_template import AlertRuleTemplate


class ScheduledAlertRuleTemplate(AlertRuleTemplate):
    """Represents scheduled alert rule template.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy
     and modifiedBy information.
    :vartype system_data: ~alertrules.models.SystemData
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param alert_rules_created_by_template_count: Required. the number of
     alert rules that were created by this template
    :type alert_rules_created_by_template_count: int
    :ivar last_updated_date_utc: The last time that this alert rule template
     has been updated.
    :vartype last_updated_date_utc: datetime
    :ivar created_date_utc: The time that this alert rule template has been
     added.
    :vartype created_date_utc: datetime
    :param description: Required. The description of the alert rule template.
    :type description: str
    :param display_name: Required. The display name for alert rule template.
    :type display_name: str
    :param required_data_connectors: The required data sources for this
     template
    :type required_data_connectors:
     list[~alertrules.models.AlertRuleTemplateDataSource]
    :param status: Required. The alert rule template status. Possible values
     include: 'Installed', 'Available', 'NotAvailable'
    :type status: str or ~alertrules.models.TemplateStatus
    :param query: Required. The query that creates alerts for this rule.
    :type query: str
    :param query_frequency: Required. The frequency (in ISO 8601 duration
     format) for this alert rule to run.
    :type query_frequency: timedelta
    :param query_period: Required. The period (in ISO 8601 duration format)
     that this alert rule looks at.
    :type query_period: timedelta
    :param severity: Required. The severity for alerts created by this alert
     rule. Possible values include: 'High', 'Medium', 'Low', 'Informational'
    :type severity: str or ~alertrules.models.AlertSeverity
    :param trigger_operator: Required. The operation against the threshold
     that triggers alert rule. Possible values include: 'GreaterThan',
     'LessThan', 'Equal', 'NotEqual'
    :type trigger_operator: str or ~alertrules.models.TriggerOperator
    :param trigger_threshold: Required. The threshold triggers this alert
     rule.
    :type trigger_threshold: int
    :param event_grouping_settings: The event grouping settings.
    :type event_grouping_settings: ~alertrules.models.EventGroupingSettings
    :param custom_details: Dictionary of string key-value pairs of columns to
     be attached to the alert
    :type custom_details: dict[str, str]
    :param entity_mappings: Array of the entity mappings of the alert rule
    :type entity_mappings: list[~alertrules.models.EntityMapping]
    :param alert_details_override: The alert details override settings
    :type alert_details_override: ~alertrules.models.AlertDetailsOverride
    :param tactics: The tactics of the alert rule template
    :type tactics: list[str or ~alertrules.models.AttackTactic]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'kind': {'required': True},
        'alert_rules_created_by_template_count': {'required': True},
        'last_updated_date_utc': {'readonly': True},
        'created_date_utc': {'readonly': True},
        'description': {'required': True},
        'display_name': {'required': True},
        'status': {'required': True},
        'query': {'required': True},
        'query_frequency': {'required': True},
        'query_period': {'required': True},
        'severity': {'required': True},
        'trigger_operator': {'required': True},
        'trigger_threshold': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'kind': {'key': 'kind', 'type': 'str'},
        'alert_rules_created_by_template_count': {'key': 'properties.alertRulesCreatedByTemplateCount', 'type': 'int'},
        'last_updated_date_utc': {'key': 'properties.lastUpdatedDateUTC', 'type': 'iso-8601'},
        'created_date_utc': {'key': 'properties.createdDateUTC', 'type': 'iso-8601'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'required_data_connectors': {'key': 'properties.requiredDataConnectors', 'type': '[AlertRuleTemplateDataSource]'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'query': {'key': 'properties.query', 'type': 'str'},
        'query_frequency': {'key': 'properties.queryFrequency', 'type': 'duration'},
        'query_period': {'key': 'properties.queryPeriod', 'type': 'duration'},
        'severity': {'key': 'properties.severity', 'type': 'str'},
        'trigger_operator': {'key': 'properties.triggerOperator', 'type': 'TriggerOperator'},
        'trigger_threshold': {'key': 'properties.triggerThreshold', 'type': 'int'},
        'event_grouping_settings': {'key': 'properties.eventGroupingSettings', 'type': 'EventGroupingSettings'},
        'custom_details': {'key': 'properties.customDetails', 'type': '{str}'},
        'entity_mappings': {'key': 'properties.entityMappings', 'type': '[EntityMapping]'},
        'alert_details_override': {'key': 'properties.alertDetailsOverride', 'type': 'AlertDetailsOverride'},
        'tactics': {'key': 'properties.tactics', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(ScheduledAlertRuleTemplate, self).__init__(**kwargs)
        self.alert_rules_created_by_template_count = kwargs.get('alert_rules_created_by_template_count', None)
        self.last_updated_date_utc = None
        self.created_date_utc = None
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.required_data_connectors = kwargs.get('required_data_connectors', None)
        self.status = kwargs.get('status', None)
        self.query = kwargs.get('query', None)
        self.query_frequency = kwargs.get('query_frequency', None)
        self.query_period = kwargs.get('query_period', None)
        self.severity = kwargs.get('severity', None)
        self.trigger_operator = kwargs.get('trigger_operator', None)
        self.trigger_threshold = kwargs.get('trigger_threshold', None)
        self.event_grouping_settings = kwargs.get('event_grouping_settings', None)
        self.custom_details = kwargs.get('custom_details', None)
        self.entity_mappings = kwargs.get('entity_mappings', None)
        self.alert_details_override = kwargs.get('alert_details_override', None)
        self.tactics = kwargs.get('tactics', None)
        self.kind = 'Scheduled'
